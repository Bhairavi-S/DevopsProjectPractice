"use strict";function cov_1b925xfoet(){var path="/Users/bhairavideshmukh/DevopsProject/MyDemoProjectPipeline/playwright.config.ts";var hash="d733b49992e0448e0179444592844b24d62b010b";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/bhairavideshmukh/DevopsProject/MyDemoProjectPipeline/playwright.config.ts",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:25}},"2":{start:{line:7,column:12},end:{line:7,column:39}},"3":{start:{line:8,column:14},end:{line:8,column:31}},"4":{start:{line:10,column:0},end:{line:10,column:22}},"5":{start:{line:20,column:15},end:{line:88,column:2}}},fnMap:{},branchMap:{"0":{loc:{start:{line:26,column:11},end:{line:26,column:33}},type:"cond-expr",locations:[{start:{line:26,column:28},end:{line:26,column:29}},{start:{line:26,column:32},end:{line:26,column:33}}],line:26},"1":{loc:{start:{line:28,column:11},end:{line:28,column:41}},type:"cond-expr",locations:[{start:{line:28,column:28},end:{line:28,column:29}},{start:{line:28,column:32},end:{line:28,column:41}}],line:28}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},f:{},b:{"0":[0,0],"1":[0,0]},inputSourceMap:{version:3,names:["_test","require","_dotenv","dotenvConfig","_default","exports","default","defineConfig","fullyParallel","forbidOnly","process","env","CI","retries","workers","undefined","reporter","outputFile","use","trace","video","screenshot","headless","projects","name","devices"],sources:["playwright.config.ts"],sourcesContent:["import { defineConfig, devices } from '@playwright/test';\nimport { config as dotenvConfig } from 'dotenv';\n\n/* Read environment variables from file */\ndotenvConfig();\n/**\n * Read environment variables from file.\n * https://github.com/motdotla/dotenv\n */\n// require('dotenv').config();\n\n/**\n * See https://playwright.dev/docs/test-configuration.\n */\nexport default defineConfig({\n  \n  /* Run tests in files in parallel */\n  fullyParallel: true,\n  /* Fail the build on CI if you accidentally left test.only in the source code. */\n  forbidOnly: !!process.env.CI,\n  /* Retry on CI only */\n  retries: process.env.CI ? 2 : 0,\n  /* Opt out of parallel tests on CI. */\n  workers: process.env.CI ? 1 : undefined,\n  /* Reporter to use. See https://playwright.dev/docs/test-reporters */\n  reporter: [\n    ['html'],\n    ['junit', { outputFile: 'test-results/e2e-junit-results.xml' }]\n  ],\n  /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */\n  use: {\n    /* Base URL to use in actions like `await page.goto('/')`. */\n    // baseURL: 'http://127.0.0.1:3000',\n\n    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */\n    trace: \"off\",\n    video: \"on\",\n    screenshot:\"on\",\n    headless: false, \n  },\n\n  /* Configure projects for major browsers */\n  projects: [\n\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n\n    // {\n    //   name: 'firefox',\n    //   use: { ...devices['Desktop Firefox'] },\n    // },\n\n    // {\n    //   name: 'webkit',\n    //   use: { ...devices['Desktop Safari'] },\n    // },\n\n    /* Test against mobile viewports. */\n    // {\n    //   name: 'Mobile Chrome',\n    //   use: { ...devices['Pixel 5'] },\n    // },\n    // {\n    //   name: 'Mobile Safari',\n    //   use: { ...devices['iPhone 12'] },\n    // },\n\n    /* Test against branded browsers. */\n    // {\n    //   name: 'Microsoft Edge',\n    //   use: { ...devices['Desktop Edge'], channel: 'msedge' },\n    // },\n    // {\n    //   name: 'Google Chrome',\n    //   use: { ...devices['Desktop Chrome'], channel: 'chrome' },\n    // },\n  ],\n  /* Run your local dev server before starting the tests */\n  // webServer: {\n  //   command: 'npm run start',\n  //   url: 'http://127.0.0.1:3000',\n  //   reuseExistingServer: !process.env.CI,\n  // },\n\n});\n"],mappings:";;;;;;AAAA,IAAAA,KAAA,GAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AAEA;AACA,IAAAE,cAAY,EAAC,CAAC;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAFA,IAAAC,QAAA,GAAAC,OAAA,CAAAC,OAAA,GAGe,IAAAC,kBAAY,EAAC;EAE1B;EACAC,aAAa,EAAE,IAAI;EACnB;EACAC,UAAU,EAAE,CAAC,CAACC,OAAO,CAACC,GAAG,CAACC,EAAE;EAC5B;EACAC,OAAO,EAAEH,OAAO,CAACC,GAAG,CAACC,EAAE,GAAG,CAAC,GAAG,CAAC;EAC/B;EACAE,OAAO,EAAEJ,OAAO,CAACC,GAAG,CAACC,EAAE,GAAG,CAAC,GAAGG,SAAS;EACvC;EACAC,QAAQ,EAAE,CACR,CAAC,MAAM,CAAC,EACR,CAAC,OAAO,EAAE;IAAEC,UAAU,EAAE;EAAqC,CAAC,CAAC,CAChE;EACD;EACAC,GAAG,EAAE;IACH;IACA;;IAEA;IACAC,KAAK,EAAE,KAAK;IACZC,KAAK,EAAE,IAAI;IACXC,UAAU,EAAC,IAAI;IACfC,QAAQ,EAAE;EACZ,CAAC;EAED;EACAC,QAAQ,EAAE,CAER;IACEC,IAAI,EAAE,UAAU;IAChBN,GAAG,EAAE;MAAE,GAAGO,aAAO,CAAC,gBAAgB;IAAE;EACtC;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA;EAEF;EACA;EACA;EACA;EACA;EACA;AAEF,CAAC,CAAC"},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"d733b49992e0448e0179444592844b24d62b010b"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1b925xfoet=function(){return actualCoverage;};}return actualCoverage;}cov_1b925xfoet();cov_1b925xfoet().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1b925xfoet().s[1]++;exports.default=void 0;var _test=(cov_1b925xfoet().s[2]++,require("@playwright/test"));var _dotenv=(cov_1b925xfoet().s[3]++,require("dotenv"));/* Read environment variables from file */cov_1b925xfoet().s[4]++;(0,_dotenv.config)();/**
 * Read environment variables from file.
 * https://github.com/motdotla/dotenv
 */ // require('dotenv').config();
/**
 * See https://playwright.dev/docs/test-configuration.
 */var _default=(cov_1b925xfoet().s[5]++,exports.default=(0,_test.defineConfig)({/* Run tests in files in parallel */fullyParallel:true,/* Fail the build on CI if you accidentally left test.only in the source code. */forbidOnly:!!process.env.CI,/* Retry on CI only */retries:process.env.CI?(cov_1b925xfoet().b[0][0]++,2):(cov_1b925xfoet().b[0][1]++,0),/* Opt out of parallel tests on CI. */workers:process.env.CI?(cov_1b925xfoet().b[1][0]++,1):(cov_1b925xfoet().b[1][1]++,undefined),/* Reporter to use. See https://playwright.dev/docs/test-reporters */reporter:[['html'],['junit',{outputFile:'test-results/e2e-junit-results.xml'}]],/* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */use:{/* Base URL to use in actions like `await page.goto('/')`. */ // baseURL: 'http://127.0.0.1:3000',
/* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */trace:"off",video:"on",screenshot:"on",headless:false},/* Configure projects for major browsers */projects:[{name:'chromium',use:{..._test.devices['Desktop Chrome']}}// {
//   name: 'firefox',
//   use: { ...devices['Desktop Firefox'] },
// },
// {
//   name: 'webkit',
//   use: { ...devices['Desktop Safari'] },
// },
/* Test against mobile viewports. */ // {
//   name: 'Mobile Chrome',
//   use: { ...devices['Pixel 5'] },
// },
// {
//   name: 'Mobile Safari',
//   use: { ...devices['iPhone 12'] },
// },
/* Test against branded browsers. */ // {
//   name: 'Microsoft Edge',
//   use: { ...devices['Desktop Edge'], channel: 'msedge' },
// },
// {
//   name: 'Google Chrome',
//   use: { ...devices['Desktop Chrome'], channel: 'chrome' },
// },
]/* Run your local dev server before starting the tests */ // webServer: {
//   command: 'npm run start',
//   url: 'http://127.0.0.1:3000',
//   reuseExistingServer: !process.env.CI,
// },
}));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdGVzdCIsInJlcXVpcmUiLCJfZG90ZW52IiwiZG90ZW52Q29uZmlnIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwiZGVmYXVsdCIsImRlZmluZUNvbmZpZyIsImZ1bGx5UGFyYWxsZWwiLCJmb3JiaWRPbmx5IiwicHJvY2VzcyIsImVudiIsIkNJIiwicmV0cmllcyIsIndvcmtlcnMiLCJ1bmRlZmluZWQiLCJyZXBvcnRlciIsIm91dHB1dEZpbGUiLCJ1c2UiLCJ0cmFjZSIsInZpZGVvIiwic2NyZWVuc2hvdCIsImhlYWRsZXNzIiwicHJvamVjdHMiLCJuYW1lIiwiZGV2aWNlcyJdLCJzb3VyY2VzIjpbInBsYXl3cmlnaHQuY29uZmlnLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmluZUNvbmZpZywgZGV2aWNlcyB9IGZyb20gJ0BwbGF5d3JpZ2h0L3Rlc3QnO1xuaW1wb3J0IHsgY29uZmlnIGFzIGRvdGVudkNvbmZpZyB9IGZyb20gJ2RvdGVudic7XG5cbi8qIFJlYWQgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZyb20gZmlsZSAqL1xuZG90ZW52Q29uZmlnKCk7XG4vKipcbiAqIFJlYWQgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZyb20gZmlsZS5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3Rkb3RsYS9kb3RlbnZcbiAqL1xuLy8gcmVxdWlyZSgnZG90ZW52JykuY29uZmlnKCk7XG5cbi8qKlxuICogU2VlIGh0dHBzOi8vcGxheXdyaWdodC5kZXYvZG9jcy90ZXN0LWNvbmZpZ3VyYXRpb24uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XG4gIFxuICAvKiBSdW4gdGVzdHMgaW4gZmlsZXMgaW4gcGFyYWxsZWwgKi9cbiAgZnVsbHlQYXJhbGxlbDogdHJ1ZSxcbiAgLyogRmFpbCB0aGUgYnVpbGQgb24gQ0kgaWYgeW91IGFjY2lkZW50YWxseSBsZWZ0IHRlc3Qub25seSBpbiB0aGUgc291cmNlIGNvZGUuICovXG4gIGZvcmJpZE9ubHk6ICEhcHJvY2Vzcy5lbnYuQ0ksXG4gIC8qIFJldHJ5IG9uIENJIG9ubHkgKi9cbiAgcmV0cmllczogcHJvY2Vzcy5lbnYuQ0kgPyAyIDogMCxcbiAgLyogT3B0IG91dCBvZiBwYXJhbGxlbCB0ZXN0cyBvbiBDSS4gKi9cbiAgd29ya2VyczogcHJvY2Vzcy5lbnYuQ0kgPyAxIDogdW5kZWZpbmVkLFxuICAvKiBSZXBvcnRlciB0byB1c2UuIFNlZSBodHRwczovL3BsYXl3cmlnaHQuZGV2L2RvY3MvdGVzdC1yZXBvcnRlcnMgKi9cbiAgcmVwb3J0ZXI6IFtcbiAgICBbJ2h0bWwnXSxcbiAgICBbJ2p1bml0JywgeyBvdXRwdXRGaWxlOiAndGVzdC1yZXN1bHRzL2UyZS1qdW5pdC1yZXN1bHRzLnhtbCcgfV1cbiAgXSxcbiAgLyogU2hhcmVkIHNldHRpbmdzIGZvciBhbGwgdGhlIHByb2plY3RzIGJlbG93LiBTZWUgaHR0cHM6Ly9wbGF5d3JpZ2h0LmRldi9kb2NzL2FwaS9jbGFzcy10ZXN0b3B0aW9ucy4gKi9cbiAgdXNlOiB7XG4gICAgLyogQmFzZSBVUkwgdG8gdXNlIGluIGFjdGlvbnMgbGlrZSBgYXdhaXQgcGFnZS5nb3RvKCcvJylgLiAqL1xuICAgIC8vIGJhc2VVUkw6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAnLFxuXG4gICAgLyogQ29sbGVjdCB0cmFjZSB3aGVuIHJldHJ5aW5nIHRoZSBmYWlsZWQgdGVzdC4gU2VlIGh0dHBzOi8vcGxheXdyaWdodC5kZXYvZG9jcy90cmFjZS12aWV3ZXIgKi9cbiAgICB0cmFjZTogXCJvZmZcIixcbiAgICB2aWRlbzogXCJvblwiLFxuICAgIHNjcmVlbnNob3Q6XCJvblwiLFxuICAgIGhlYWRsZXNzOiBmYWxzZSwgXG4gIH0sXG5cbiAgLyogQ29uZmlndXJlIHByb2plY3RzIGZvciBtYWpvciBicm93c2VycyAqL1xuICBwcm9qZWN0czogW1xuXG4gICAge1xuICAgICAgbmFtZTogJ2Nocm9taXVtJyxcbiAgICAgIHVzZTogeyAuLi5kZXZpY2VzWydEZXNrdG9wIENocm9tZSddIH0sXG4gICAgfSxcblxuICAgIC8vIHtcbiAgICAvLyAgIG5hbWU6ICdmaXJlZm94JyxcbiAgICAvLyAgIHVzZTogeyAuLi5kZXZpY2VzWydEZXNrdG9wIEZpcmVmb3gnXSB9LFxuICAgIC8vIH0sXG5cbiAgICAvLyB7XG4gICAgLy8gICBuYW1lOiAnd2Via2l0JyxcbiAgICAvLyAgIHVzZTogeyAuLi5kZXZpY2VzWydEZXNrdG9wIFNhZmFyaSddIH0sXG4gICAgLy8gfSxcblxuICAgIC8qIFRlc3QgYWdhaW5zdCBtb2JpbGUgdmlld3BvcnRzLiAqL1xuICAgIC8vIHtcbiAgICAvLyAgIG5hbWU6ICdNb2JpbGUgQ2hyb21lJyxcbiAgICAvLyAgIHVzZTogeyAuLi5kZXZpY2VzWydQaXhlbCA1J10gfSxcbiAgICAvLyB9LFxuICAgIC8vIHtcbiAgICAvLyAgIG5hbWU6ICdNb2JpbGUgU2FmYXJpJyxcbiAgICAvLyAgIHVzZTogeyAuLi5kZXZpY2VzWydpUGhvbmUgMTInXSB9LFxuICAgIC8vIH0sXG5cbiAgICAvKiBUZXN0IGFnYWluc3QgYnJhbmRlZCBicm93c2Vycy4gKi9cbiAgICAvLyB7XG4gICAgLy8gICBuYW1lOiAnTWljcm9zb2Z0IEVkZ2UnLFxuICAgIC8vICAgdXNlOiB7IC4uLmRldmljZXNbJ0Rlc2t0b3AgRWRnZSddLCBjaGFubmVsOiAnbXNlZGdlJyB9LFxuICAgIC8vIH0sXG4gICAgLy8ge1xuICAgIC8vICAgbmFtZTogJ0dvb2dsZSBDaHJvbWUnLFxuICAgIC8vICAgdXNlOiB7IC4uLmRldmljZXNbJ0Rlc2t0b3AgQ2hyb21lJ10sIGNoYW5uZWw6ICdjaHJvbWUnIH0sXG4gICAgLy8gfSxcbiAgXSxcbiAgLyogUnVuIHlvdXIgbG9jYWwgZGV2IHNlcnZlciBiZWZvcmUgc3RhcnRpbmcgdGhlIHRlc3RzICovXG4gIC8vIHdlYlNlcnZlcjoge1xuICAvLyAgIGNvbW1hbmQ6ICducG0gcnVuIHN0YXJ0JyxcbiAgLy8gICB1cmw6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAnLFxuICAvLyAgIHJldXNlRXhpc3RpbmdTZXJ2ZXI6ICFwcm9jZXNzLmVudi5DSSxcbiAgLy8gfSxcblxufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLE9BQUEsR0FBQUQsT0FBQTtBQUVBO0FBQ0EsSUFBQUUsY0FBWSxFQUFDLENBQUM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUZBLElBQUFDLFFBQUEsR0FBQUMsT0FBQSxDQUFBQyxPQUFBLEdBR2UsSUFBQUMsa0JBQVksRUFBQztFQUUxQjtFQUNBQyxhQUFhLEVBQUUsSUFBSTtFQUNuQjtFQUNBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsRUFBRTtFQUM1QjtFQUNBQyxPQUFPLEVBQUVILE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUM7RUFDL0I7RUFDQUUsT0FBTyxFQUFFSixPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsRUFBRSxHQUFHLENBQUMsR0FBR0csU0FBUztFQUN2QztFQUNBQyxRQUFRLEVBQUUsQ0FDUixDQUFDLE1BQU0sQ0FBQyxFQUNSLENBQUMsT0FBTyxFQUFFO0lBQUVDLFVBQVUsRUFBRTtFQUFxQyxDQUFDLENBQUMsQ0FDaEU7RUFDRDtFQUNBQyxHQUFHLEVBQUU7SUFDSDtJQUNBOztJQUVBO0lBQ0FDLEtBQUssRUFBRSxLQUFLO0lBQ1pDLEtBQUssRUFBRSxJQUFJO0lBQ1hDLFVBQVUsRUFBQyxJQUFJO0lBQ2ZDLFFBQVEsRUFBRTtFQUNaLENBQUM7RUFFRDtFQUNBQyxRQUFRLEVBQUUsQ0FFUjtJQUNFQyxJQUFJLEVBQUUsVUFBVTtJQUNoQk4sR0FBRyxFQUFFO01BQUUsR0FBR08sYUFBTyxDQUFDLGdCQUFnQjtJQUFFO0VBQ3RDOztFQUVBO0VBQ0E7RUFDQTtFQUNBOztFQUVBO0VBQ0E7RUFDQTtFQUNBOztFQUVBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTs7RUFFQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFBQTtFQUVGO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtBQUVGLENBQUMsQ0FBQyJ9
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdGVzdCIsImNvdl8xYjkyNXhmb2V0IiwicyIsInJlcXVpcmUiLCJfZG90ZW52IiwiY29uZmlnIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwiZGVmYXVsdCIsImRlZmluZUNvbmZpZyIsImZ1bGx5UGFyYWxsZWwiLCJmb3JiaWRPbmx5IiwicHJvY2VzcyIsImVudiIsIkNJIiwicmV0cmllcyIsImIiLCJ3b3JrZXJzIiwidW5kZWZpbmVkIiwicmVwb3J0ZXIiLCJvdXRwdXRGaWxlIiwidXNlIiwidHJhY2UiLCJ2aWRlbyIsInNjcmVlbnNob3QiLCJoZWFkbGVzcyIsInByb2plY3RzIiwibmFtZSIsImRldmljZXMiXSwic291cmNlcyI6WyJwbGF5d3JpZ2h0LmNvbmZpZy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVDb25maWcsIGRldmljZXMgfSBmcm9tICdAcGxheXdyaWdodC90ZXN0JztcbmltcG9ydCB7IGNvbmZpZyBhcyBkb3RlbnZDb25maWcgfSBmcm9tICdkb3RlbnYnO1xuXG4vKiBSZWFkIGVudmlyb25tZW50IHZhcmlhYmxlcyBmcm9tIGZpbGUgKi9cbmRvdGVudkNvbmZpZygpO1xuLyoqXG4gKiBSZWFkIGVudmlyb25tZW50IHZhcmlhYmxlcyBmcm9tIGZpbGUuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbW90ZG90bGEvZG90ZW52XG4gKi9cbi8vIHJlcXVpcmUoJ2RvdGVudicpLmNvbmZpZygpO1xuXG4vKipcbiAqIFNlZSBodHRwczovL3BsYXl3cmlnaHQuZGV2L2RvY3MvdGVzdC1jb25maWd1cmF0aW9uLlxuICovXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xuICBcbiAgLyogUnVuIHRlc3RzIGluIGZpbGVzIGluIHBhcmFsbGVsICovXG4gIGZ1bGx5UGFyYWxsZWw6IHRydWUsXG4gIC8qIEZhaWwgdGhlIGJ1aWxkIG9uIENJIGlmIHlvdSBhY2NpZGVudGFsbHkgbGVmdCB0ZXN0Lm9ubHkgaW4gdGhlIHNvdXJjZSBjb2RlLiAqL1xuICBmb3JiaWRPbmx5OiAhIXByb2Nlc3MuZW52LkNJLFxuICAvKiBSZXRyeSBvbiBDSSBvbmx5ICovXG4gIHJldHJpZXM6IHByb2Nlc3MuZW52LkNJID8gMiA6IDAsXG4gIC8qIE9wdCBvdXQgb2YgcGFyYWxsZWwgdGVzdHMgb24gQ0kuICovXG4gIHdvcmtlcnM6IHByb2Nlc3MuZW52LkNJID8gMSA6IHVuZGVmaW5lZCxcbiAgLyogUmVwb3J0ZXIgdG8gdXNlLiBTZWUgaHR0cHM6Ly9wbGF5d3JpZ2h0LmRldi9kb2NzL3Rlc3QtcmVwb3J0ZXJzICovXG4gIHJlcG9ydGVyOiBbXG4gICAgWydodG1sJ10sXG4gICAgWydqdW5pdCcsIHsgb3V0cHV0RmlsZTogJ3Rlc3QtcmVzdWx0cy9lMmUtanVuaXQtcmVzdWx0cy54bWwnIH1dXG4gIF0sXG4gIC8qIFNoYXJlZCBzZXR0aW5ncyBmb3IgYWxsIHRoZSBwcm9qZWN0cyBiZWxvdy4gU2VlIGh0dHBzOi8vcGxheXdyaWdodC5kZXYvZG9jcy9hcGkvY2xhc3MtdGVzdG9wdGlvbnMuICovXG4gIHVzZToge1xuICAgIC8qIEJhc2UgVVJMIHRvIHVzZSBpbiBhY3Rpb25zIGxpa2UgYGF3YWl0IHBhZ2UuZ290bygnLycpYC4gKi9cbiAgICAvLyBiYXNlVVJMOiAnaHR0cDovLzEyNy4wLjAuMTozMDAwJyxcblxuICAgIC8qIENvbGxlY3QgdHJhY2Ugd2hlbiByZXRyeWluZyB0aGUgZmFpbGVkIHRlc3QuIFNlZSBodHRwczovL3BsYXl3cmlnaHQuZGV2L2RvY3MvdHJhY2Utdmlld2VyICovXG4gICAgdHJhY2U6IFwib2ZmXCIsXG4gICAgdmlkZW86IFwib25cIixcbiAgICBzY3JlZW5zaG90Olwib25cIixcbiAgICBoZWFkbGVzczogZmFsc2UsIFxuICB9LFxuXG4gIC8qIENvbmZpZ3VyZSBwcm9qZWN0cyBmb3IgbWFqb3IgYnJvd3NlcnMgKi9cbiAgcHJvamVjdHM6IFtcblxuICAgIHtcbiAgICAgIG5hbWU6ICdjaHJvbWl1bScsXG4gICAgICB1c2U6IHsgLi4uZGV2aWNlc1snRGVza3RvcCBDaHJvbWUnXSB9LFxuICAgIH0sXG5cbiAgICAvLyB7XG4gICAgLy8gICBuYW1lOiAnZmlyZWZveCcsXG4gICAgLy8gICB1c2U6IHsgLi4uZGV2aWNlc1snRGVza3RvcCBGaXJlZm94J10gfSxcbiAgICAvLyB9LFxuXG4gICAgLy8ge1xuICAgIC8vICAgbmFtZTogJ3dlYmtpdCcsXG4gICAgLy8gICB1c2U6IHsgLi4uZGV2aWNlc1snRGVza3RvcCBTYWZhcmknXSB9LFxuICAgIC8vIH0sXG5cbiAgICAvKiBUZXN0IGFnYWluc3QgbW9iaWxlIHZpZXdwb3J0cy4gKi9cbiAgICAvLyB7XG4gICAgLy8gICBuYW1lOiAnTW9iaWxlIENocm9tZScsXG4gICAgLy8gICB1c2U6IHsgLi4uZGV2aWNlc1snUGl4ZWwgNSddIH0sXG4gICAgLy8gfSxcbiAgICAvLyB7XG4gICAgLy8gICBuYW1lOiAnTW9iaWxlIFNhZmFyaScsXG4gICAgLy8gICB1c2U6IHsgLi4uZGV2aWNlc1snaVBob25lIDEyJ10gfSxcbiAgICAvLyB9LFxuXG4gICAgLyogVGVzdCBhZ2FpbnN0IGJyYW5kZWQgYnJvd3NlcnMuICovXG4gICAgLy8ge1xuICAgIC8vICAgbmFtZTogJ01pY3Jvc29mdCBFZGdlJyxcbiAgICAvLyAgIHVzZTogeyAuLi5kZXZpY2VzWydEZXNrdG9wIEVkZ2UnXSwgY2hhbm5lbDogJ21zZWRnZScgfSxcbiAgICAvLyB9LFxuICAgIC8vIHtcbiAgICAvLyAgIG5hbWU6ICdHb29nbGUgQ2hyb21lJyxcbiAgICAvLyAgIHVzZTogeyAuLi5kZXZpY2VzWydEZXNrdG9wIENocm9tZSddLCBjaGFubmVsOiAnY2hyb21lJyB9LFxuICAgIC8vIH0sXG4gIF0sXG4gIC8qIFJ1biB5b3VyIGxvY2FsIGRldiBzZXJ2ZXIgYmVmb3JlIHN0YXJ0aW5nIHRoZSB0ZXN0cyAqL1xuICAvLyB3ZWJTZXJ2ZXI6IHtcbiAgLy8gICBjb21tYW5kOiAnbnBtIHJ1biBzdGFydCcsXG4gIC8vICAgdXJsOiAnaHR0cDovLzEyNy4wLjAuMTozMDAwJyxcbiAgLy8gICByZXVzZUV4aXN0aW5nU2VydmVyOiAhcHJvY2Vzcy5lbnYuQ0ksXG4gIC8vIH0sXG5cbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzJOQUFBLElBQUFBLEtBQUEsRUFBQUMsY0FBQSxHQUFBQyxDQUFBLE1BQUFDLE9BQUEsc0JBQ0EsSUFBQUMsT0FBQSxFQUFBSCxjQUFBLEdBQUFDLENBQUEsTUFBQUMsT0FBQSxZQUVBLDBDQUFBRixjQUFBLEdBQUFDLENBQUEsTUFDQSxHQUFBRSxPQUFBLENBQUFDLE1BQVksRUFBQyxDQUFDLENBQ2Q7QUFDQTtBQUNBO0FBQ0EsR0FIQSxDQUlBO0FBRUE7QUFDQTtBQUNBLEdBRkEsSUFBQUMsUUFBQSxFQUFBTCxjQUFBLEdBQUFDLENBQUEsTUFBQUssT0FBQSxDQUFBQyxPQUFBLENBR2UsR0FBQVIsS0FBQSxDQUFBUyxZQUFZLEVBQUMsQ0FFMUIsb0NBQ0FDLGFBQWEsQ0FBRSxJQUFJLENBQ25CLGlGQUNBQyxVQUFVLENBQUUsQ0FBQyxDQUFDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsRUFBRSxDQUM1QixzQkFDQUMsT0FBTyxDQUFFSCxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsRUFBRSxFQUFBYixjQUFBLEdBQUFlLENBQUEsU0FBRyxDQUFDLEdBQUFmLGNBQUEsR0FBQWUsQ0FBQSxTQUFHLENBQUMsRUFDL0Isc0NBQ0FDLE9BQU8sQ0FBRUwsT0FBTyxDQUFDQyxHQUFHLENBQUNDLEVBQUUsRUFBQWIsY0FBQSxHQUFBZSxDQUFBLFNBQUcsQ0FBQyxHQUFBZixjQUFBLEdBQUFlLENBQUEsU0FBR0UsU0FBUyxFQUN2QyxxRUFDQUMsUUFBUSxDQUFFLENBQ1IsQ0FBQyxNQUFNLENBQUMsQ0FDUixDQUFDLE9BQU8sQ0FBRSxDQUFFQyxVQUFVLENBQUUsb0NBQXFDLENBQUMsQ0FBQyxDQUNoRSxDQUNELHdHQUNBQyxHQUFHLENBQUUsQ0FDSCw4REFDQTtBQUVBLCtGQUNBQyxLQUFLLENBQUUsS0FBSyxDQUNaQyxLQUFLLENBQUUsSUFBSSxDQUNYQyxVQUFVLENBQUMsSUFBSSxDQUNmQyxRQUFRLENBQUUsS0FDWixDQUFDLENBRUQsMkNBQ0FDLFFBQVEsQ0FBRSxDQUVSLENBQ0VDLElBQUksQ0FBRSxVQUFVLENBQ2hCTixHQUFHLENBQUUsQ0FBRSxHQUFHckIsS0FBQSxDQUFBNEIsT0FBTyxDQUFDLGdCQUFnQixDQUFFLENBQ3RDLENBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLHFDQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSxxQ0FDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUEsQ0FFRiwwREFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUYsQ0FBQyxDQUFDLEUifQ==